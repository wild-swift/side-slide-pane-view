apply plugin: 'com.android.library'

apply plugin: 'maven-publish'

group = 'name.wildswift.android'
version = publish_version

android {
    compileSdkVersion 32

    defaultConfig {
        minSdkVersion 10
        targetSdkVersion 32
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
}

task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
}

task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    android.libraryVariants.all { variant ->
        if (variant.name == 'release') {
            owner.classpath += variant.javaCompileProvider.get().classpath
        }
    }
    exclude '**/R.html', '**/R.*.html', '**/index.html'
}

task javadocJar(type: Jar, dependsOn: androidJavadocs) {
    archiveClassifier.set('javadoc')
    from androidJavadocs.destinationDir
}

artifacts {
    archives sourcesJar, javadocJar
}

publishing {
    publications {
        Production(MavenPublication) {
            artifact("$buildDir/outputs/aar/side-slide-pane-view-release.aar")
            artifact sourcesJar
            artifact javadocJar

            groupId this.group
            artifactId 'side-slide-pane-view'
            version this.version

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                // Iterate over the implementation dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.implementation.allDependencies.each {
                    // Ensure dependencies such as fileTree are not included in the pom.
                    if (it.name != 'unspecified') {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
    repositories {
        maven {
            name 'MapacheNexus'
            url project.hasProperty('nexusUrl') ? nexusUrl : System.getenv('NEXUS_URL')
            allowInsecureProtocol = true
            credentials {
                username project.hasProperty('nexusUser') ? nexusUser : System.getenv('NEXUS_USER')
                password project.hasProperty('nexusPassword') ? nexusPassword : System.getenv('NEXUS_PASSWORD')
            }
        }
    }
}